name: rsdk-build
description: rsdk build Action
inputs:
  product:
    required: true
  suite:
    required: false
  edition:
    required: false
  artifacts:
    required: false
    default: false
  release-id:
    required: false
  github-token:
    required: false
  test-repo:
    required: false
    default: false
  timestamp:
    required: false
    default: b${{ github.run_number }}
  tag_name:
    required: false
    default: rsdk-b${{ github.run_number }}
  override-kernel:
    required: false
  override-firmware:
    required: false
runs:
  using: "composite"
  steps:
    - name: Maximize build space
      run: |
        # The commands that were previously under "uses"
        # Include shell script commands directly here
        ./maximize_build_space.sh  # Example placeholder
      shell: bash
    - name: Setup rsdk
      run: |
        # Custom setup steps for rsdk
        ./setup_rsdk.sh  # Another placeholder
      shell: bash
    - name: Set suite based on input variables
      run: |
        options=()
        if [[ "${{ inputs.test-repo }}" == "true" ]]
        then
          options+=("--test-repo")
        fi
        if [[ -n "${{ inputs.override-kernel }}" ]]
        then
          options+=("--override-kernel" "${{ inputs.override-kernel }}")
        fi
        if [[ -n "${{ inputs.override-firmware }}" ]]
        then
          options+=("--override-firmware" "${{ inputs.override-firmware }}")
        fi
        echo "options=${options[*]}" >> $GITHUB_ENV
      shell: bash
    - name: Build within devcontainer
      run: |
        # The commands to run inside a devcontainer
        src/bin/rsdk setup
        src/bin/rsdk shell rsdk build ${{ env.options }} ${{ inputs.product }} ${{ inputs.suite }} ${{ inputs.edition }}
      shell: bash
    - name: Prepare for release
      id: prep
      run: |
        cd out/${{ inputs.product }}*
        sudo chown -R $USER:$GROUPS .
        BUILD_TUPLE="$(basename "$(realpath .)")"
        echo "BUILD_TUPLE=$BUILD_TUPLE" >> $GITHUB_OUTPUT
        sed -i "s/rootfs.tar/${BUILD_TUPLE}_${{ inputs.timestamp }}.rootfs.tar/" build-image
        for i in *
        do
          mv "$i" "${BUILD_TUPLE}_${{ inputs.timestamp }}.$i"
        done
        xz -vT 0 *.img *.tar
        find . -type f -exec sha512sum {} \; | tee "${BUILD_TUPLE}_${{ inputs.timestamp }}.sha512sum"
      shell: bash
    - name: Upload build outputs to Artifacts
      if: inputs.artifacts == 'true'
      run: |
        # Upload the build output to GitHub Artifacts
        echo "Uploading artifacts..."
      shell: bash
    - name: Upload build outputs to Release
      if: inputs.release-id != '' && inputs.github-token != ''
      run: |
        # Upload the build outputs to GitHub Release
        echo "Uploading to GitHub release..."
      shell: bash
    - name: Append changelog header
      if: inputs.release-id != '' && inputs.github-token != ''
      run: |
        # Add changelog header to release notes
        echo "Appending changelog header..."
      shell: bash
    - name: Append checksum
      if: inputs.release-id != '' && inputs.github-token != ''
      run: |
        # Append checksum file to the release notes
        echo "Appending checksum..."
      shell: bash
    - name: Append changelog footer
      if: inputs.release-id != '' && inputs.github-token != ''
      run: |
        # Add footer to the release notes
        echo "Appending changelog footer..."
      shell: bash
    - name: Rollback release
      if: failure() && inputs.release-id != '' && inputs.github-token != ''
      run: |
        # Rollback release if any step fails
        echo "Rolling back release..."
      shell: bash
